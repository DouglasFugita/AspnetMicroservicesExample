version: '3.4'

services:
  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    restart: always
    ports: 
      - "8080:8000"
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_BASICAUTH_USERNAME: dfugita
      ME_CONFIG_BASICAUTH_PASSWORD: MongoExpress
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_MONGODB_URL: mongodb://catalogdb:27017
    links:
      - catalogdb
    networks:
      - mongo-compose-network

  basketdb:
    image: redis:alpine
    container_name: basketdb
    restart: always
    ports:
      - "6379:6379"
    networks:
      - basket-network

  catalogdb:
    image: mongo
    container_name: catalogdb
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - mongo-compose-network

  catalog.api:
    image: ${DOCKER_REGISTRY-}catalogapi
    container_name: catalog.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - "DatabaseSettings:ConnectionString=mongodb://catalogdb:27017"
    ports:
      - "8000:80"
    depends_on:
      - catalogdb
    build:
      context: .
      dockerfile: Services/Catalog/Catalog.API/Dockerfile
    networks:
      - mongo-compose-network

  basket.api:
    image: ${DOCKER_REGISTRY-}basketapi
    container_name: basket.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - "CacheSettings:ConnectionString=basketdb:6379"
    ports:
      - "8001:80"	  
    depends_on:
      - basketdb
    build:
      context: .
      dockerfile: Services/Basket/Basket.API/Dockerfile
    networks:
      - basket-network

volumes:
  mongo_data:
  portainer_data:

networks: 
    mongo-compose-network:
      driver: bridge
    basket-network:
      driver: bridge