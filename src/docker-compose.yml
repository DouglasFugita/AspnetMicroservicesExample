version: '3.4'

services:
  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    restart: always
    ports: 
      - "8080:8000"
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_BASICAUTH_USERNAME: dfugita
      ME_CONFIG_BASICAUTH_PASSWORD: MongoExpress
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_MONGODB_URL: mongodb://catalogdb:27017
    links:
      - catalogdb
    networks:
      - catalog-network

  rabbitmq:
    image: rabbitmq:3-management-alpine
    networks:
      - basket-network
      - ordering-network

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin1234
    volumes:
      - pgadmin_data:/root/.pgadmin/
    networks:
      - discount-network


  basketdb:
    image: redis:alpine
    container_name: basketdb
    restart: always
    ports:
      - "6379:6379"
    networks:
      - basket-network

  catalogdb:
    image: mongo
    container_name: catalogdb
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - catalog-network

  discountdb:
    image: postgres
    container_name: discountdb
    restart: always
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin1234
      - POSTGRES_DB=DiscountDb
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - discount-network

  orderdb:
    image: mcr.microsoft.com/mssql/server:2017-latest
    container_name: orderdb
    environment:
        SA_PASSWORD: "SenhaBD965"
        ACCEPT_EULA: "Y"
    restart: always
    ports:
        - "1433:1433"
    networks:
      - ordering-network

  catalog.api:
    image: ${DOCKER_REGISTRY-}catalogapi
    container_name: catalog.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - "DatabaseSettings:ConnectionString=mongodb://catalogdb:27017"
    ports:
# Acesso direto removido - Utilizar API atraves do OcelotApiGw
#      - "8000:80"
       - "80"
    depends_on:
      - catalogdb
    build:
      context: .
      dockerfile: Services/Catalog/Catalog.API/Dockerfile
    networks:
      - catalog-network

  basket.api:
    image: ${DOCKER_REGISTRY-}basketapi
    container_name: basket.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - "CacheSettings:ConnectionString=basketdb:6379"
      - "GrpcSettings:DiscountUrl=http://discount.grpc"
      - "EventBusSettings:HostAddress=amqp://guest:guest@rabbitmq:5672"
    ports:
# Acesso direto removido - Utilizar API atraves do OcelotApiGw
#      - "8001:80"
      - "80"	  
    depends_on:
      - basketdb
    build:
      context: .
      dockerfile: Services/Basket/Basket.API/Dockerfile
    networks:
      - basket-network

  discount.api:
    image: ${DOCKER_REGISTRY-}discountapi
    container_name: discount.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - "DatabaseSettings:ConnectionString=Server=discountdb;Port=5432;Database=DiscountDb;User Id=admin;Password=admin1234;"
    ports:
# Acesso direto removido - Utilizar API atraves do OcelotApiGw
#      - "8002:80"
      - "80"	  
    depends_on:
      - discountdb
    build:
      context: .
      dockerfile: Services/Discount/Discount.API/Dockerfile
    networks:
      - discount-network

  discount.grpc:
    image: ${DOCKER_REGISTRY-}discountgrpc
    container_name: discount.grpc
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    ports:
      - "8003:80"
    depends_on:
      - discountdb
    build:
      context: .
      dockerfile: Services/Discount/Discount.gRPC/Dockerfile
    networks:
      - basket-network
      - discount-network

  ordering.api:
    image: ${DOCKER_REGISTRY-}orderingapi
    container_name: ordering.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - "ConnectionStrings:OrderingConnectionString=Server=orderdb;Database=OrderDb;User Id=sa;Password=SenhaBD965;Trust Server Certificate=true;"
      - "EventBusSettings:HostAddress=amqp://guest:guest@rabbitmq:5672"
    ports:
# Acesso direto removido - Utilizar API atraves do OcelotApiGw
#      - "8004:80"
      - "80"
    depends_on:
      - orderdb
    build:
      context: .
      dockerfile: Services/Ordering/Ordering.API/Dockerfile
    networks:
      - ordering-network


  ocelotapigw:
    image: ${DOCKER_REGISTRY-}ocelotapigw
    build:
      context: .
      dockerfile: ApiGateways/OcelotApiGw/Dockerfile
    networks:
      - catalog-network
      - basket-network
      - discount-network
      - ordering-network

volumes:
  mongo_data:
  portainer_data:
  postgres_data:
  pgadmin_data:

networks: 
    catalog-network:
      driver: bridge
    basket-network:
      driver: bridge
    discount-network:
      driver: bridge
    ordering-network:
      driver: bridge



