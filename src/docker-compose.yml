version: '3.4'

services:
  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    restart: always
    ports: 
      - "8080:8000"
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_BASICAUTH_USERNAME: dfugita
      ME_CONFIG_BASICAUTH_PASSWORD: MongoExpress
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_MONGODB_URL: mongodb://catalogdb:27017
    links:
      - catalogdb
    networks:
      - catalog-network

  rabbitmq:
    image: rabbitmq:3-management-alpine
    networks:
      - basket-network
      - ordering-network

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin1234
    volumes:
      - pgadmin_data:/root/.pgadmin/
    networks:
      - discount-network


  basketdb:
    image: redis:alpine
    container_name: basketdb
    restart: always
    ports:
      - "6379:6379"
    networks:
      - basket-network

  catalogdb:
    image: mongo
    container_name: catalogdb
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - catalog-network

  discountdb:
    image: postgres
    container_name: discountdb
    restart: always
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin1234
      - POSTGRES_DB=DiscountDb
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - discount-network

  orderdb:
    image: mcr.microsoft.com/mssql/server:2017-latest
    container_name: orderdb
    environment:
        SA_PASSWORD: "SenhaBD965"
        ACCEPT_EULA: "Y"
    restart: always
    ports:
        - "1433:1433"
    networks:
      - ordering-network

  catalog.api:
    image: ${DOCKER_REGISTRY-}catalogapi
    build:
      context: .
      dockerfile: Services/Catalog/Catalog.API/Dockerfile

  basket.api:
    image: ${DOCKER_REGISTRY-}basketapi
    build:
      context: .
      dockerfile: Services/Basket/Basket.API/Dockerfile

  discount.api:
    image: ${DOCKER_REGISTRY-}discountapi
    build:
      context: .
      dockerfile: Services/Discount/Discount.API/Dockerfile

  discount.grpc:
    image: ${DOCKER_REGISTRY-}discountgrpc
    build:
      context: .
      dockerfile: Services/Discount/Discount.gRPC/Dockerfile


  ordering.api:
    image: ${DOCKER_REGISTRY-}orderingapi
    build:
      context: .
      dockerfile: Services/Ordering/Ordering.API/Dockerfile

  ocelotapigw:
    image: ${DOCKER_REGISTRY-}ocelotapigw
    build:
      context: .
      dockerfile: ApiGateways/OcelotApiGw/Dockerfile

  shopping.aggregator:
    image: ${DOCKER_REGISTRY-}shoppingaggregator
    build:
      context: .
      dockerfile: ApiGateways/Shopping.Aggregator/Dockerfile

  aspnetrunbasics6:
    image: ${DOCKER_REGISTRY-}aspnetrunbasics6
    build:
      context: .
      dockerfile: WebApps/AspnetRunBasics6/Dockerfile

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.2

  kibana:
    image: docker.elastic.co/kibana/kibana:7.9.2


volumes:
  mongo_data:
  portainer_data:
  postgres_data:
  pgadmin_data:
  elasticsearch_data:

networks: 
    catalog-network:
      driver: bridge
    basket-network:
      driver: bridge
    discount-network:
      driver: bridge
    ordering-network:
      driver: bridge
    frontend-network:
      driver: bridge
    elastic-network:
      driver: bridge





